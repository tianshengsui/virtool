name: Virtool CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test-server:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:3.6
        ports:
          - 27017:27017

    container:
      image: virtool/external-tools:0.1.2

    steps:
      - uses: actions/checkout@v2
      - name: Test server
        run: |
          pip install -qr requirements.txt
          pytest  -x --db-connection-string mongodb://mongo:27017 --cov --cov-report xml

      - name: Run codacy-coverage-reporter
        if: ${{ github.event_name == 'push' }}
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: $GITHUB_WORKSPACE/coverage.xml

  test-client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Test client
        run: |
          cd client
          npm i
          npx jest --coverage

  build:
    runs-on: ubuntu-latest
    needs: [test-server, test-client]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
            node-version: '12'

      - name: Use Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Build client
        run: |
          cd client
          npm i
          npx webpack --config webpack.production.config.babel.js

      - name: Set version
        id: set_version
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
        if: startsWith(github.ref, 'refs/tags/v')

      - name: Build server
        env:
          RELEASE_VERSION: ${{ steps.set_version.outputs.tag }}
        run: |
          pip install -r requirements.txt
          mkdir gh_build
          mkdir gh_build/virtool
          python -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'
          python -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); print(flags&os.O_NONBLOCK);'
          python setup.py build
          cp -rv build/exe.linux-x86_64-3.6/* gh_build/virtool
          if [ "$RELEASE_VERSION" ]; then echo $RELEASE_VERSION > version.txt; else echo "v0.0.0" > version.txt; fi
          cd gh_build
          tar -czf virtool.tar.gz virtool

      - name: Save artifacts
        uses: actions/upload-artifact@v2
        with:
          name: virtool.tar.gz
          path: gh_build/virtool.tar.gz

      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ steps.set_version.outputs.tag }}
        with:
          tag_name: $RELEASE_VERSION
          release_name: Release $RELEASE_VERSION
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: gh_build/virtool.tar.gz
          asset_name: virtool.tar.gz
          asset_content_type: application/gzip
